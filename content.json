{"meta":{"title":"Xiaoran的笔记","subtitle":"","description":"","author":"萧然","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"hexo的Next主题配置","slug":"hexo的Next主题配置","date":"2022-03-26T15:52:03.000Z","updated":"2022-03-26T18:20:05.650Z","comments":true,"path":"2022/03/26/hexo的Next主题配置/","link":"","permalink":"http://example.com/2022/03/26/hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/","excerpt":"选择仓库在设置主题时候，无意间发现Next是有两个库，名字很相像，名字与地址分别是： theme-next&#x2F;hexo-theme-next next-theme&#x2F;hexo-theme-next next-theme的主题，是从v8.0.0开始，theme-next在写下这段文字时，版本为v7.8.0。由于默认情况下，实测V7版本在IOS浏览器中会出现主页空白的现象。这个现象需要将 motion 置 false 才可以消除。因此选择了V8以及以后的版本。","text":"选择仓库在设置主题时候，无意间发现Next是有两个库，名字很相像，名字与地址分别是： theme-next&#x2F;hexo-theme-next next-theme&#x2F;hexo-theme-next next-theme的主题，是从v8.0.0开始，theme-next在写下这段文字时，版本为v7.8.0。由于默认情况下，实测V7版本在IOS浏览器中会出现主页空白的现象。这个现象需要将 motion 置 false 才可以消除。因此选择了V8以及以后的版本。 fork主题并使用由于在使用中会将主题进行修改，并希望保存配置，因此需要在gitHub页面将工程fork到自己的gitHub账户中。然后使用命令将Next主题仓库设置为站点source分支的子模块，放在 themes 目录下,： 12git submodule add git@github.com:xiaorangood/hexo-theme-next.git themes/nextgit commit -m &quot;添加Next主题为子模块&quot; &amp;&amp; git push origin source 然后需改站点的 _config.yml 中主题设置： 12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next#theme: landscape 使用 hexo 命令重新生成网站并启动服务器，通过各终端查看效果 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 设置主题样式Next主题默认有4种样式，其中 Pisces 和 Gemini 暂时看不出区别，先选择了 Gemini 。打开主题的 _config.yml 文件，设置为： 12345# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 设置页脚建站时间Next主题在没有设置建站时间情况下，只会显示当前时间；在 themes&#x2F;next&#x2F;_config.yml 文件中搜索 since，设置起始时间为2018年。 123footer: # Specify the year when the site was setup. If not defined, current year will be used. since: 2018 设置TOC目录的样式在 themes&#x2F;next&#x2F;_config.yml 文件中搜索 toc；设置TOC目录不自动编码且不折叠： 123456toc: enable: true # Automatically add list number to toc. number: false # If true, all level of TOC in a post will be displayed, rather than the activated part of it. expand_all: true 设置站点主页和归档页面在 themes&#x2F;next&#x2F;_config.yml 文件中搜索 menu；将 home 和 archives 前的注释去除。 123menu: home: / || fa fa-home archives: /archives/ || fa fa-archive 页面显示当前浏览进度在 themes&#x2F;next&#x2F;_config.yml 文件中搜索 scrollpercent；将false数值改为 true。 1scrollpercent: true 设置代码块在 themes&#x2F;next&#x2F;_config.yml 文件中搜索 copy_button，将复制按钮使能；查看 theme 下的 light 字段，将 light 字段的 default 修改为 monokai。 1234567891011121314codeblock: # Code Highlight theme # All available themes: https://theme-next.js.org/highlight/ theme: # light: default # light: rainbow light: monokai # light: purebasic dark: stackoverflow-dark # Add copy button on codeblock copy_button: enable: true # Available values: default | flat | mac style","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"Next主题","slug":"Next主题","permalink":"http://example.com/tags/Next%E4%B8%BB%E9%A2%98/"}]},{"title":"如何利用GitHub作为图床","slug":"如何利用GitHub作为图床","date":"2022-03-20T12:24:00.000Z","updated":"2022-03-26T18:13:33.450Z","comments":true,"path":"2022/03/20/如何利用GitHub作为图床/","link":"","permalink":"http://example.com/2022/03/20/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8GitHub%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/","excerpt":"下载PicGo进入PicGo的下载地址，根据系统选择版本。因为我的点好是 win11，因此选择的软件版本是 PicGo-Setup-2.3.0-x64.exe。下载完成后，双击软件按照默认设置安装。 创建 GitHub 仓库创建后，在我的GitHub页面中，就有一个 myImage 的仓库。 12https://github.com/xiaorangood/myImage.gitgit@github.com:xiaorangood/myImage.git","text":"下载PicGo进入PicGo的下载地址，根据系统选择版本。因为我的点好是 win11，因此选择的软件版本是 PicGo-Setup-2.3.0-x64.exe。下载完成后，双击软件按照默认设置安装。 创建 GitHub 仓库创建后，在我的GitHub页面中，就有一个 myImage 的仓库。 12https://github.com/xiaorangood/myImage.gitgit@github.com:xiaorangood/myImage.git 生成 token点击“头像”-&gt;”setting” -&gt; “Developer settings” -&gt; “Personal access tokens” -&gt; “Generate New token”。 设置token的名字、有效期；并勾选“repo”，最后下拉到最下方，点击“Generate token”按钮。 配置picgo打开picgo软件，在左边的栏目中点击“图床设置” -&gt; “GitHub图床”。按照下面的说明设置 设定仓库名：按照“用户名&#x2F;图床仓库名”的格式填写 设定分支名：“master” 设定Token：粘贴之前生成的Token 指定存储路径：填写想要储存的路径，如“images&#x2F;”，这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中。 设定自定义域名：它的的作用是，在图片上传后，PicGo会按照自定义域名+上传的图片名的方式生成访问链接，放到粘贴板上，因为我们要使用jsDelivr加速访问，所以可以设置为 https://cdn.jsdelivr.net/gh/用户名/图床仓库名。jsDelivr的参考格式：https://cdn.jsdelivr.net/gh/xiaorangood/myImage。 上述的内容填写完成后，点击“确认”按钮，再设置GitHub图床为默认图床。 上传图片点击左侧栏目里的上传区后，将需要上传的图片拖入上传区即可。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"图床","slug":"图床","permalink":"http://example.com/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Picgo","slug":"Picgo","permalink":"http://example.com/tags/Picgo/"}]},{"title":"在Windows下利用Hexo搭建个人博客","slug":"在Windows下利用Hexo搭建个人博客","date":"2022-03-20T07:26:46.000Z","updated":"2022-03-26T18:21:59.767Z","comments":true,"path":"2022/03/20/在Windows下利用Hexo搭建个人博客/","link":"","permalink":"http://example.com/2022/03/20/%E5%9C%A8Windows%E4%B8%8B%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"本地创建个人博客安装 git 工具从git官网下载windows下的软件，本文按照时的软件版本为 2.35.1。 安装软件时，使用默认设置一直点击 Next 按钮，一直到下图的页面勾选两个选项；然后点击 Install 安装 git 软件。 勾选“Enable experimental support for pseudo consoles”选项是为了在 git bash 中启动 Hexo 服务后，可以通过 Ctrl + c 停止 Hexo 服务器的运行。","text":"本地创建个人博客安装 git 工具从git官网下载windows下的软件，本文按照时的软件版本为 2.35.1。 安装软件时，使用默认设置一直点击 Next 按钮，一直到下图的页面勾选两个选项；然后点击 Install 安装 git 软件。 勾选“Enable experimental support for pseudo consoles”选项是为了在 git bash 中启动 Hexo 服务后，可以通过 Ctrl + c 停止 Hexo 服务器的运行。 安装node.jsHexo是基于Node.js的，因此在安装Hexo前，需要安装该软件。 从 Node.js官网下载软件，当前版本号是 17.7.2。 下载软件后，按照默认设置安装即可。 安装 Hexo 软件执行以下几个命令安装 123456789# 将npm镜像修改为淘宝镜像npm config set registry &quot;https://registry.npm.taobao.org&quot;# 使用npm安装 Hexonpm install -g hexo-cli# 在当前目录下初始化一个博客目录，并进入该目录hexo init blogcd blog# 在博客目录使用命令启动Hexo服务器hexo s 浏览器后，输入 http://localhost:4000/ 即可打开博客网页。如果希望在其他端口打开网页，可以使用 Hexo 命令指定端口。例如指定端口为5000。 1hexo s -p 5000 创建Hexo文件执行以下命令后，Hexo会在 source_posts 目录下创建以文章名命名的markdown文件 1$ hexo n &quot;文章名&quot; 然后执行命令生成html文件 1$ hexo g 最后使用命令运行 Hexo 服务器即可看到新内容 部署博客到Git Pages创建博客仓库在github页面中，创建新仓库，仓库名字为 xiaorangood.github.io 。 安装自动部署工具并设置执行以下命令安装部署工具： 1npm install --save hexo-deployer-git 设置站点的_config.yml 配置文件内容： 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: git@github.com:xiaorangood/xiaorangood.github.io.git branch: master 测试网络连接通过命令生成 ssh 密钥: 12ssh-keygencat ~/.ssh/id_rsa.pub 在获得密钥后，添加到github的个人设置页面中添加密钥： 添加密钥后，通过命令验证是否连接成功： 12$ ssh -T git@github.comHi xiaorangood! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 如果出现超时的现象，通过命令设置 git 的代理： 12git config --global http.proxy &#x27;http://127.0.0.1:10809&#x27;git config --global https.proxy &#x27;http://127.0.0.1:10809&#x27; 部署个人博客网页在blog的目录下执行命令部署个人博客： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 使用source分支来保存博客源文件在 github 上创建新分支上个章节中展示了使用 master 分支来保存生成的博客页面的方法，但原来的markdown文件并没有保存。为了保存 Markdown 文件，在仓库中创建source分支。 将source分支修改为默认分支： 检查仓库的默认分支： 设置本地仓库在 blog 所在目录，执行仓库初始化，并设置远端仓库的地址。然后切换到目标分支。这里我的博客是在D:/blog/目录下。 123git initgit remote add origin git@github.com:xiaorangood/xiaorangood.github.io.gitgit checkout source -- 因为我们只需要保留博客源码，其他无关的文件并不希望推送，需要确保配好了.gitignore文件，通常如下： 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_multiconfig.yml 提交源文件1git add . &amp;&amp; git commit -m &quot;Regular save&quot; &amp;&amp; git push origin source 删除非源文件由于source分支是从master复制而来，所以有一些是deployment文件。这些部署的文件可以删除，也可以理会。删除文件夹后只剩下如下的文件夹。 1node_modules/ scaffolds/ source/ themes/ 新环境假设换电脑了，要在新环境继续在原有仓库基础上撸文章，此时通过git clone将博客源码拉到本地，然后安装、初始化hexo就能搞定： 12345678git clone git@github.com:xiaorangood/xiaorangood.github.io.git blogcd blognpm install hexonpm install hexo-deployer-git -save// hexo环境配置好后，继续像之前一样hexo new post_name...","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"}]},{"title":"数据结构系列笔记-算法与复杂度分析","slug":"数据结构系列笔记-算法与复杂度分析","date":"2021-12-30T09:43:14.000Z","updated":"2022-04-05T18:00:36.290Z","comments":true,"path":"2021/12/30/数据结构系列笔记-算法与复杂度分析/","link":"","permalink":"http://example.com/2021/12/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0-%E7%AE%97%E6%B3%95%E4%B8%8E%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/","excerpt":"数据结构与算法的研究内容 逻辑结构：研究对象的特征及其相互之间的关系。 存储结构：研究有效组织计算机存储。 算法：有效地实现对象之间的“运算”关系。 算法的定义算法是对特定问题求解方法和步骤的一种描述，它是指令的有限序列。其中每个指令表示一个或多个操作。","text":"数据结构与算法的研究内容 逻辑结构：研究对象的特征及其相互之间的关系。 存储结构：研究有效组织计算机存储。 算法：有效地实现对象之间的“运算”关系。 算法的定义算法是对特定问题求解方法和步骤的一种描述，它是指令的有限序列。其中每个指令表示一个或多个操作。 算法的描述 自然语言：英语、中文。 流程图：传统流程图、NS流程图。 伪代码（类语言）：类C语言。 程序代码：C语言程序、JAVA语言程序。 算法与程序的关系算法是解决问题的一种方法或一个过程，考虑如何将输入转换成输出，一个问题可以有多种算法。程序是用某种程序设计语言对算法的具体实现。程序&#x3D;数据结构+算法；数据结构通过算法实现操作；算法根据数据结构设计程序。 算法特性一个算法必须具备以下五个重要特征： 有穷性：一个算法必须总是在执行有穷步骤之后结束，且每一步都在有穷时间内完成。 确定性：算法中的每一条指令必须有确切的含义，没有二义性，在任何条件下，只有唯一的一条直线路径，即对于相同的输入只能得到相同的输出。 可行性：算法是可以执行的，算法描述的操作可以通过已经实现的基本操作执行有限次来实现。 一个算法有零个或多个输入。 一个算法有一个或多个输出。 算法设计的要求具有四个要求： 正确性（Correctness） 可读性（Readability） 健壮性（Robustness） 高效性（Efficiency） 正确性正确性是满足问题要求，能正确解决问题。算法转换为程序后要注意： 程序中不含语法错误； 程序对于几组输入数据能够得出满足要求的结果； 程序对于精心选择的、典型的、苛刻且带有刁难性的几组输入数据能够得出满足要求的结果； 程序对于一切合法的输入数据都能得出满足要求的结果。 通常以第三层意义上的正确性作为衡量一个算法是否合格的标准。 可读性可读性具有2层含义： 算法主要是为了人阅读和交流，其次才是为计算机执行，因此算法应该易于人的理解； 另一方面，晦涩难读的算法易于隐藏较多错误而难以调试。 健壮性健壮性是指当输入非法数据时，算法恰当的做出反应或进行相应处理，而不是产生莫名奇妙的输出结果。处理出错的方法，不应是中断程序的执行，而应该是返回一个表示错误或错误性质的值，以便在更高的抽象层次上进行处理。 高效性高效性要求尽量少的时间和尽量低的存储需求。 算法分析算法分析用来评价同一个问题的多个算法。算法分析的目的是看算法实际是否可行，并在同一问题存在多个算法时可进行性能上的比较，以便从中挑选除比较优的算法。 一个好算法首先具备正确性，然后健壮性、可读性；在这几个方面多满足的情况下，主要考虑算法的效率，通过算法的效率高低来评判不同算法的优劣程度。算法效率包括： 时间效率：指算法所消耗的时间； 空间效率：指算法执行过程中所消耗的存储空间。 时间效率和空间效率有时候时矛盾的。 算法的时间效率算法时间效率可以用依据该算法编制的程序在计算机上所消耗的时间来度量。有两种度量方法： 事后统计：将算法实现，测孙其时间和空间开销；缺点是编写程序实现算法将或非较多的时间和精力，所得实验结果依赖于计算机的软硬件等环境因素，掩盖算法本身的优劣。 事前分析：对算法所消耗资源的一种估计算法。 事前分析法 一个算法的运行时间是一个算法在计算机上运行所耗费的时间，大致可以等于计算机执行一种简单的操作（如赋值、比较、移动等）所需的时间与算法中进行的简单操作次数乘积。 算法运行时间 &#x3D; 一个简单操作所需要的时间×简单操作次数。 即算法中每条语句的执行时间之和。 算法运行时间 &#x3D; Σ(每条语句执行次数)×该语句执行一次所需要的时间。 每条语句的执行次数又称为语句的频度。 算法运行时间 &#x3D; Σ(每条语句频度)×该语句执行一次所需要的时间。 每条语句执行一次所需的时间，一般都是随机器而异的。每条语句执行一次所需的时间，一般都是随机器而异的。取决于机器的指令性能、速度以及编译的代码质量，是由机器本身软硬件环境决定的，它与算法无关。 我们可以假设执行每条语句所需的时间均为单位时间，此时对算法运行时间的讨论就可以转化为讨论该算法中所有语句的执行次数，即频度之和了。 这就可以独立于不同机器的软硬件环境来分析算法的时间性能了。 算法运行时间的例子：两个n×n矩阵相乘算法 123456for (i=1; i&lt;=n; i++) // n+1次，n次循环，1次判断 for (j=1; j&lt;=n; j++) &#123; // n*(n+1)次，外层循环n次，内层n+1次 c[i][j] = 0; // n*n次，2层循环 for (k=0; k&lt;n; k++) // n*n*(n+1)次，外面2层循环，内层n+1次 c[i][j] = c[i][j] + a[i][k] * b[k][j]; // n*n*n次，三层循环&#125; 我们把算法所耗费的时间定义为该算法中每条语句的频度之和，则该算法的时间消耗T(n)为：T(n) &#x3D; 2×n3 + 3×n2 + 2×n + 1。 数量级为了便于不同算法的时间效率，我们仅比较它们的数量级。例如，$T_1(n) &#x3D; 10 \\times n^2$ 与 $T_2(n)&#x3D;5 \\times n$这两个比较。若有某个辅助函数f(n)使得当n趋近于无穷大时，$T(n)&#x2F;f(n)$的极限值为不等于零的常数，则称$f(n)$是$T(n)$的同数量级函数。记作$T(n)&#x3D;O(f(n))$，称$O(f(n))$为算法的渐进时间复杂度（O是数量级的符号），简称时间复杂度。 例如，公式$T(n) &#x3D; 2 \\times n^3 + 3 \\times n^2 + 2 \\times n + 1$中，当$n\\rightarrow \\infin$时，$T(n)&#x2F;n^2 \\rightarrow 2$，这表示$n$充分大时，$T(n)$与$n^3$是同阶或同数量级，引入大“O”记号，则$T(n)$可记作：$T(n)&#x3D;O(n^3)$ 算法时间复杂度 定义：算法中基本语句重复执行的次数是问题规模$n$的某个函数$f(n)$，算法的时间量度记作：$T(n)&#x3D;O(n)$。它表示随着n的增大，算法执行的时间的增长率和$f(n)$的增长率相同，称为渐进时间复杂度。数据符号“O”定义为若$T(n)$和$f(n)$是定义在正整数集合上的两个函数，则$T(n)&#x3D;O(f(n))$表示存在正的常数$C$和$n_0$，使得当$n≥n_0$时都满足$0≤T(n)≤C*f(n)$。 基本语句是指算法中重复执行次数和算法的执行时间成正比的语句；对算法运行时间的贡献最大的语句；执行次数最多语句。 问题规模$n$越大，算法的执行时间越长。对于排序来说，$n$为记录数；对于矩阵来说，$n$为矩阵的阶数；对于多项式来说，$n$为多项式的项数；对于集合来说，$n$为元素个数；对于树来说，$n$为树的结点个数；对于图来说，$n$为图的顶点数或边数。 分析算法时间复杂度的基本方法 一般方法： 找出语句频度最大的那条语句作为基本语句; 计算基本语句的频度得到问题规模n的某个函数f(n)； 取其数量级用符号“O”表示。 技巧: 忽略所有低次幂项和高次幂系数，体现增长率的含义； 时间复杂度是由嵌套最深语句的频度决定的。 时间复杂度分析例题计算下方语句的时间复杂度。 例子11234for (i=1; i&lt;=n; i++) for (j=1; j&lt;=i; j++) for (k=1; j&lt;=j; j++) x = x + 1; $$语句的频度&#x3D; \\sum_{i&#x3D;1}^n\\sum_{j&#x3D;1}^n\\sum_{z&#x3D;1}^n &#x3D; \\sum_{i&#x3D;1}^n\\sum_{j&#x3D;1}^nj &#x3D; \\sum_{i&#x3D;1}^n \\frac{i(i+1)}{2}&#x3D;\\frac{1}{2} \\left( \\sum_{i&#x3D;1}^ni^2+ \\sum_{i&#x3D;1}^ni\\right) \\&#x3D;frac{1}{2} \\left( \\frac{n(n+1)(n+2)}{6} + \\frac{n(n+1)}{2}\\right) &#x3D; \\frac{n(n+1)(n+2)}{6}\\ $$","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"数据结构系列笔记-概述","slug":"数据结构系列笔记-概述","date":"2021-11-21T11:23:47.000Z","updated":"2022-03-26T18:24:50.892Z","comments":true,"path":"2021/11/21/数据结构系列笔记-概述/","link":"","permalink":"http://example.com/2021/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0-%E6%A6%82%E8%BF%B0/","excerpt":"1 程序的本质程序等于算法加数据结构。 2 基本数据结构 线性结构:（1）线性表、（2）栈和队列、（3） 串、（4）数组和广义表 非线性结构：树、广义表 3 基本数据处理技术 查找技术 排序技术","text":"1 程序的本质程序等于算法加数据结构。 2 基本数据结构 线性结构:（1）线性表、（2）栈和队列、（3） 串、（4）数组和广义表 非线性结构：树、广义表 3 基本数据处理技术 查找技术 排序技术 4 数据结构的研究内容4.1 计算机解决问题的基本步骤 具体问题抽象为数据模型，其实质为 分析问题； 提取操作对象； 找出操作对象之间的关系； 用数学语言描述，即数据结构； 设计算法 编程、调试、运行 4.2 计算机的应用早期，计算机主要应用于数值计算，例如求解梁架结构中的应力、预报人口增长情况。 数值计算的特点是数据元素之间的关系简单，但计算复杂。 现在，计算机越来越多地被用于非数值计算问题，例如学生学籍管理系统、图书管理系统、人事管理系统、仓库管理系统、通讯录等。 非数值计算各要素的含义 例子 操作对象 操作算法 操作对象间关系 数据结构 学籍管理系统中的关系 每位学生的信息 查询、插入、修改、删除等 线性关系 线性数据结构、线性表 人机棋局对弈问题中的关系 描述棋盘格局信息的棋局状态 走棋，即选择一种策略使棋局状态发生变化 非线性关系 树 非数值计算问题的特点： 所有问题无法使用数学公式或方程来描述，是一些“非数值计算”的程序设计问题； 描述非数值计算问题的数学模型不是数学方程，而是诸如表、树和图之类的具有逻辑关系的数据； 数据结构是一门研究非数值计算程序设计中操作对象以及它们之间的关系和操作的学科。 5 基本概念和术语5.1 数据（Data）数据（Data）是输入计算机且能被计算机处理的各种符号的集合，是信息的载体，是对客观事物符号化的表示；是能够被计算机识别、存储和加工。 数据包括数值型的数据和非数值型的数据；数值型的数据有整数、实数等；非数值型数据有文字、图像、图形、声音等。 5.2 数据元素（Data element）数据元素（Data element）是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。数据元素也简称为元素、记录、结点或顶点。例如学生表中一个学生的信息，即一个记录。 5.3 数据项（Data Item）数据项（Data Item）是构成数据元素的不分割的最小单位。例如学生表中一个学生的姓名、学号、性别、出生日期、政治面貌均可作为一个数据项。 5.4 数据、数据元素、数据项三者之间的关系数据&gt;数据元素&gt;数据项。 5.5 数据对象（Data Object）数据对象（Data Object）是性质相同的数据类型的集合，是数据的一个子集。例如整数数据对象、字母字符数据对象、学籍表也可以看作一个数据对象。 5.6 数据元素与数据对象的区别 数据元素是组成数据的基本单位，是数据集合的个体； 数据对象是性质想吐的数据元素的集合，是数据集合的子集。 5.6 数据结构5.6.1 定义数据元素不是孤立存在的，它们之间存在某种关系，数据元素相互之间的关系称为结构（Structure）。数据结构是相互之间存在一种或多种特定关系的数据元素集合。数据结构是带结构的数据元素的集合。 5.6.2 数据结构的内容 数据元素之间的逻辑关系，也称为逻辑结构； 数据元素及其结构在计算机内存中的表示（又称为映像），称为数据的物理结果或数据的存储结构； 数据的运算和实现，即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现。 5.6.3 数据结构的层次数据结构的层次包括逻辑结构和存储结构。 逻辑结构是描述数据元素之间的逻辑关系；与数据存储无关，独立于计算机；是从具体问题抽象出来的数学模型。 存储结构又称为物理结构，是数据元素及其关系在计算机存储器中的结构（存储方式）；是数据结构在计算机中的表示。 两者的关系： 存储结构是逻辑关系的映射与元素本身的映像； 逻辑结构是数据结构的抽象，存储结构是数据结构的实现； 两者综合起来建立了数据元素之间的结构关系。 5.6.4 逻辑结构的分类 划分方法一：线性结构和非线性结构。 线性结构是有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前驱和一个直接后继。 非线性结构是一个节点可能有多个直接前驱和直接后继，例如树、图。 划分方法二：将逻辑结构分为四种基本逻辑结构，即集合、线性、树、图。 5.6.5 存储结构的分类存储结构的分类包括顺序存储结构、链式存储结构、索引存储结构、散列存储结构。 顺序存储结构是用一组连续的存储单元，依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。C语言中用数组来实现顺序存储结构。 链式存储结构是用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。C语言中用指针来实现链式存储结构。 索引存储结构是在存储结点信息的同时，还建立附加的索引表。索引表的每一项称为索引项。索引表的一般形式是“(关键字，地址)”。关键字是能唯一表示结点的那些数据项。若每个结点的索引表中都有一个索引项，则该索引表称为稠密索引（Dense Index）。若一组结点子啊索引表中只对应一个索引项，则该索引表称为稀疏索引表（Sparse Index）。 散列存储结构是根据结点的关键字直接计算出该点的存储地址。 5.7 数据结构类型数据结构类型可以约束变量或常量的取值范围；约束变量或常量的操作。 数据类型（Data Type）是一组性质相同的值的集合以及定义于这个值集合上的一组操作的总称。数据类型&#x3D;值的集合+值集合上的一组操作。 抽象数据类型（Abstract Data Type，ADT）是指一个数学模型以及定义在此数据模型上的一组操作。由用户定义，从问题抽象出数据模型（逻辑结构），还包括定义在数据模型上的一组抽象运算（相关操作），不考虑计算机内的具体存储结构与运损的具体实现算法。 抽象数据类型的形式定义：抽象数据类型可用（D，S，P）三元组表示，其中D是数据对象，S是D上的关系集，P是对D的基本操作集。","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}],"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"Next主题","slug":"Next主题","permalink":"http://example.com/tags/Next%E4%B8%BB%E9%A2%98/"},{"name":"图床","slug":"图床","permalink":"http://example.com/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Picgo","slug":"Picgo","permalink":"http://example.com/tags/Picgo/"},{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}