{"meta":{"title":"Xiaoran的笔记","subtitle":"","description":"","author":"萧然","url":"http://example.com","root":"/"},"pages":[{"title":"友情链接","date":"2022-05-03T06:34:43.000Z","updated":"2022-05-03T06:57:39.859Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-05-03T05:53:41.000Z","updated":"2022-05-03T06:02:02.179Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-05-03T05:50:40.000Z","updated":"2022-05-03T06:02:11.041Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"5g/NR的部署场景","slug":"5g-NR的部署场景","date":"2022-05-09T13:26:47.000Z","updated":"2022-05-09T14:37:36.299Z","comments":true,"path":"posts/8923add9.html","link":"","permalink":"http://example.com/posts/8923add9.html","excerpt":"《TR 38.801 V14.0.0 (2017-03) Study on new radio access technologyRadio access architecture and interfaces》文章的第5章介绍了5G RAN需要考虑的几种场景。 这里，我们需要假设 gNB 和其他 gNB 或 (e)LTE eNB 之间可以支持基站间接口。","text":"《TR 38.801 V14.0.0 (2017-03) Study on new radio access technologyRadio access architecture and interfaces》文章的第5章介绍了5G RAN需要考虑的几种场景。 这里，我们需要假设 gNB 和其他 gNB 或 (e)LTE eNB 之间可以支持基站间接口。 1 相关定义 gNB是支持NR无线接口，并可以连接到NGC的通信节点。在《TS 38.300 V15.6.0》文中，gNB被定义为可以向UE提供NR数据面和控制面协议，并通过NG接口连接到5GC的终端。 eLTE eNB是既可以连接到NGC，又可以连接到EPC的通信节点。 5GC（5G Core Network）和NGC（Next Generation Core Network）都表示5G系统的核心网。 RAN：Radio Access Network，无线接入网络。 2 非集中式部署（Non-centralised deployment） 该场景中，gNB支持所有的协议栈。这里的gNB可以是宏站，也可以是公共或者企业的室内热点。gNB可以连接到任意的传输，并假设gNB可以通过RAN接口连接到其他的gNB或者 eLTE eNB。 sdfsd 3 与EUTRAN共址部署（Co-sited deployment with E-UTRA） 在这种情况下，NR 功能与 E-UTRA 功能共址，可以作为同一基站的一部分，也可以作为同一站点的多个基站。共站部署可适用于所有NR部署场景，例如城市宏站。在这种情况下，希望通过负载均衡或者通过多种无线接入技术，使得频率资源被充分应用。 4 集中部署（Centralized deployment） NR 应支持上层 NR 无线协议栈的集中化。CU（Centralized Unit，集中单元）和 gNB 底层协议具有多种不同的切分选项，其功能划分取决于传输层。CU和gNB底层协议间的高性能传输（例如光纤传输），可以实现高级CoMP和调度优化。这种部署在高容量场景或跨小区协调有益的场景中可能很有用。 高层协议栈在带宽、延迟、同步、抖动这些方面的性能要求比较低，所以可以CU可以支持。 与E-UTRA共址部署和非共址部署都可以支持几种部署。 5 共享 RAN 部署（Shared RAN deployment） NR 应支持共享 RAN 部署，以支持多个核心网运营商。共享 RAN 可以覆盖较大的地理区域，例如国家或区域网络共享；可以是异构的，也就是被限制在较小的区域里，例如Shared in-building RAN；可以高效的与非共享 RAN进行互操作。 每个核心网运营商可能有自己的，且与可以与其他共享 RAN 相邻的非共享 RAN。共享 RAN 和非共享 RAN之间的移动性，不能比LTE差。 共享 RAN 既可以在共享频谱上，也可以在运行商的频谱上运行。","categories":[{"name":"3gpp","slug":"3gpp","permalink":"http://example.com/categories/3gpp/"},{"name":"NR","slug":"3gpp/NR","permalink":"http://example.com/categories/3gpp/NR/"}],"tags":[{"name":"3gpp","slug":"3gpp","permalink":"http://example.com/tags/3gpp/"},{"name":"NR","slug":"NR","permalink":"http://example.com/tags/NR/"}]},{"title":"解决Hexo的Accessing non-existent property 'xxx' of module exports inside circular dependency问题","slug":"解决Hexo的Accessing-non-existent-property-xxx-of-module-exports-inside-circular-dependency问题","date":"2022-05-05T14:55:50.000Z","updated":"2022-05-05T15:08:46.431Z","comments":true,"path":"posts/afa63241.html","link":"","permalink":"http://example.com/posts/afa63241.html","excerpt":"1 问题 运行hexo s后，出现下面所示的错误： 123456789INFO Start processingINFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.(node:15252) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:15252) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:15252) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency(node:15252) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(node:15252) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:15252) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency","text":"1 问题 运行hexo s后，出现下面所示的错误： 123456789INFO Start processingINFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.(node:15252) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:15252) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:15252) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency(node:15252) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(node:15252) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:15252) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency 2 原因 通过搜索，直到了是因为nib使用了比较低版本的stylus。 参考链接： [1] https://www.haoyizebo.com/posts/710984d0/ [2] https://gsgundam.com/2021-10-29-hexo-nodejs14-accessing-non-existent-property-issue/ 3 解决方法 使用yarn指定包的版本。 步骤1：安装yarn 1npm install -g yarn 步骤2：修改博客站点的package.json文件 123&quot;resolutions&quot;: &#123; &quot;stylus&quot;: &quot;^0.54.8&quot; &#125; 步骤3：使用命令更新依赖包 1yarn install 经过依赖包跟新，则只能定了stylus使用的版本","categories":[{"name":"blog","slug":"blog","permalink":"http://example.com/categories/blog/"}],"tags":[{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Next主题自定义友情链接","slug":"Next主题自定义友情链接","date":"2022-05-03T06:52:31.000Z","updated":"2022-05-03T15:00:29.390Z","comments":true,"path":"posts/914c8c3f.html","link":"","permalink":"http://example.com/posts/914c8c3f.html","excerpt":"Next主题版本：8.10.1 1 新增 links 页面 在控制台使用命令创建： 1hexo new page links 也可在博客根目录 /source 下手动创建 links 文件夹和里边的 index.md 文件。","text":"Next主题版本：8.10.1 1 新增 links 页面 在控制台使用命令创建： 1hexo new page links 也可在博客根目录 /source 下手动创建 links 文件夹和里边的 index.md 文件。 # 编辑links对应的文档 在博客根目录 /source 下会生成一个 links 文件夹，打开其中的 index.md 文件，做如下编辑： 123title: 友情链接date: 2022-05-03 14:34:43type: &quot;links&quot; 2 编辑主题配置文件 在主题配置（themes/next/_config.yml)文件中，menu目录下添加如下配置： 12menu: links: /links/ || fas fa-link 在 /themes/next/languages/zh-CN.yml 文件中 menu 下增加中文描述 12menu: links: 友链 3 设置友链页面样式 在themes\\next\\layout\\_partials\\page里新建links.njk文件，添加如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990&#123;% block content %&#125; &#123;######################&#125; &#123;### LINKS BLOCK ###&#125; &#123;######################&#125; &lt;div id=&quot;links&quot;&gt; &lt;style&gt; .links-content&#123; margin-top:1rem; &#125; .link-navigation::after &#123; content: &quot; &quot;; display: block; clear: both; &#125; .card &#123; width: 300px; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; &#125; .card:nth-child(odd) &#123; float: left; &#125; .card:nth-child(even) &#123; float: left; &#125; .card:hover &#123; transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); &#125; .card a &#123; border:none; &#125; .card .ava &#123; width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:4px; &#125; .card .card-header &#123; font-style: italic; overflow: hidden; width: 236px; &#125; .card .card-header a &#123; font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; &#125; .card .card-header a:hover &#123; color: #d480aa; text-decoration: none; &#125; .card .card-header .info &#123; font-style:normal; color:#a3a3a3; font-size:14px; min-width: 0; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; &#125; &lt;/style&gt; &lt;div class=&quot;links-content&quot;&gt; &lt;div class=&quot;link-navigation&quot;&gt; &#123;% for link in theme.mylinks %&#125; &lt;div class=&quot;card&quot;&gt; &lt;img class=&quot;ava&quot; src=&quot;&#123;&#123; link.avatar &#125;&#125;&quot;/&gt; &lt;div class=&quot;card-header&quot;&gt; &lt;div&gt;&lt;a href=&quot;&#123;&#123; link.site &#125;&#125;&quot; target=&quot;_blank&quot;&gt;@ &#123;&#123; link.nickname &#125;&#125;&lt;/a&gt;&lt;/div&gt; &lt;div class=&quot;info&quot;&gt;&#123;&#123; link.info &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;&#123; page.content &#125;&#125; &lt;/div&gt; &lt;/div&gt; &#123;##########################&#125; &#123;### END LINKS BLOCK ###&#125; &#123;##########################&#125;&#123;% endblock %&#125;&#125; 修改themes/next/layout/page.njk文件，注意格式。 在 12&#123;%- elif page.type === &#x27;schedule&#x27; and not page.title %&#125; &#123;&#123;- __(&#x27;title.schedule&#x27;) + page_title_suffix &#125;&#125; 下面添加： 12&#123;%- elif page.type === &#x27;links&#x27; and not page.title %&#125; &#123;&#123;- __(&#x27;title.links&#x27;) + page_title_suffix &#125;&#125; 在 12&#123;% elif page.type === &#x27;schedule&#x27; %&#125; &#123;%- include &#x27;_partials/page/schedule.njk&#x27; -%&#125; 下面添加： 12&#123;% elif page.type === &#x27;links&#x27; %&#125; &#123;%- include &#x27;_partials/page/links.njk&#x27; -%&#125; 4 设置友情链接页面 在主题配置（themes/next/_config.yml)文件末尾处添加友链： 123456789mylinks: - nickname: #友链名称 avatar: #友链头像 site: #友链地址 info: #友链说明 - nickname: #友链名称 avatar: #友链头像 site: #友链地址 info: #友链说明","categories":[{"name":"blog","slug":"blog","permalink":"http://example.com/categories/blog/"}],"tags":[{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"Next主题","slug":"Next主题","permalink":"http://example.com/tags/Next%E4%B8%BB%E9%A2%98/"}]},{"title":"hexo的Next主题配置","slug":"hexo的Next主题配置","date":"2022-03-26T15:52:03.000Z","updated":"2022-05-05T14:53:39.483Z","comments":true,"path":"posts/ff5f663b.html","link":"","permalink":"http://example.com/posts/ff5f663b.html","excerpt":"1 选择仓库 在设置主题时候，无意间发现Next是有两个库，名字很相像，名字与地址分别是： theme-next/hexo-theme-next next-theme/hexo-theme-next next-theme的主题，是从v8.0.0开始，theme-next在写下这段文字时，版本为v7.8.0。由于默认情况下，实测V7版本在IOS浏览器中会出现主页空白的现象。这个现象需要将 motion 置 false 才可以消除。因此选择了V8以及以后的版本。 主题配置可以参考主题配置 - NexT 使用文档。","text":"1 选择仓库 在设置主题时候，无意间发现Next是有两个库，名字很相像，名字与地址分别是： theme-next/hexo-theme-next next-theme/hexo-theme-next next-theme的主题，是从v8.0.0开始，theme-next在写下这段文字时，版本为v7.8.0。由于默认情况下，实测V7版本在IOS浏览器中会出现主页空白的现象。这个现象需要将 motion 置 false 才可以消除。因此选择了V8以及以后的版本。 主题配置可以参考主题配置 - NexT 使用文档。 2 fork主题并使用 由于在使用中会将主题进行修改，并希望保存配置，因此需要在gitHub页面将工程fork到自己的gitHub账户中。然后使用命令将Next主题仓库设置为站点source分支的子模块，放在 themes 目录下,： 12git submodule add git@github.com:xiaorangood/hexo-theme-next.git themes/nextgit commit -m &quot;添加Next主题为子模块&quot; &amp;&amp; git push origin source 然后需改站点的 _config.yml 中主题设置： 12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next#theme: landscape 使用 hexo 命令重新生成网站并启动服务器，通过各终端查看效果 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 3 设置主题样式 Next主题默认有4种样式，其中 Pisces 和 Gemini 暂时看不出区别，先选择了 Gemini 。打开主题的 _config.yml 文件，设置为： 12345# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 4 设置页脚建站时间 Next主题在没有设置建站时间情况下，只会显示当前时间；在 themes/next/_config.yml 文件中搜索 since，设置起始时间为2018年。 123footer: # Specify the year when the site was setup. If not defined, current year will be used. since: 2018 5 设置TOC目录的样式 在 themes/next/_config.yml 文件中搜索 toc；设置TOC目录不自动编码且不折叠： 123456toc: enable: true # Automatically add list number to toc. number: false # If true, all level of TOC in a post will be displayed, rather than the activated part of it. expand_all: true 6 设置文章和TOC自动编号 6.1 通过hexo-heading-index插件的方法 参考hexo-heading-index仓库。 步骤1：安装hexo-heading-index插件 1npm install hexo-heading-index --save 步骤2：设置博客站点的配置文件_config.yml 123456heading_index: enable: true index_styles: &quot;&#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125;&quot; connector: &quot;.&quot; global_prefix: &quot;&quot; global_suffix: &quot; &quot; 步骤3：在关闭主题配置文件themes\\next\\_config.yml的TOC目录自动编号功能 123456toc: enable: true # Automatically add list number to toc. number: false # If true, all level of TOC in a post will be displayed, rather than the activated part of it. expand_all: true 步骤4：执行命令重新生成博客网页 1hexo clean &amp;&amp; hexo g 6.2 ccs方法 注意：该方法只能全局设置，且文章的编号必须从h1开始。 6.2.1 设置Next主题的CCS 打开文件themes\\next\\source\\css\\main.styl，在末尾添加如下代码： 12345678910111213141516.post-block &#123; .post-body &#123;counter-reset: h1&#125; h1 &#123;counter-reset: h2&#125; h2 &#123;counter-reset: h3&#125; h3 &#123;counter-reset: h4&#125; h4 &#123;counter-reset: h5&#125; h5 &#123;counter-reset: h6&#125;&#125;.post-body &#123; h1:before &#123;counter-increment: h1; content: counter(h1) &quot;. &quot;&#125; h2:before &#123;counter-increment: h2; content: counter(h1) &quot;.&quot; counter(h2) &quot;. &quot;&#125; h3:before &#123;counter-increment: h3; content: counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;. &quot;&#125; h4:before &#123;counter-increment: h4; content: counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;. &quot;&#125; h5:before &#123;counter-increment: h5; content: counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;.&quot; counter(h5) &quot;. &quot;&#125; h6:before &#123;counter-increment: h6; content: counter(h1) &quot;.&quot; counter(h2) &quot;.&quot; counter(h3) &quot;.&quot; counter(h4) &quot;.&quot; counter(h5) &quot;.&quot; counter(h6) &quot;. &quot;&#125;&#125; 参考Next Issues 873。 6.2.2 设置TOC目录自动编号 打开主题的配置文档themes\\next\\_config.yml,做如下配置： 1234toc: enable: true # Automatically add list number to toc. number: true 7 设置站点主页和归档页面 在 themes/next/_config.yml 文件中搜索 menu；将 home 和 archives 前的注释去除。 123menu: home: / || fa fa-home archives: /archives/ || fa fa-archive 8 页面显示当前浏览进度 在 themes/next/_config.yml 文件中搜索 scrollpercent；将false数值改为 true。 1scrollpercent: true 9 设置代码块 在 主题配置（themes/next/_config.yml ）文件中搜索 copy_button，将复制按钮使能；查看 theme 下的 light 字段，将 light 字段的 default 修改为 monokai。 1234567891011121314codeblock: # Code Highlight theme # All available themes: https://theme-next.js.org/highlight/ theme: # light: default # light: rainbow light: monokai # light: purebasic dark: stackoverflow-dark # Add copy button on codeblock copy_button: enable: true # Available values: default | flat | mac style 10 使能MathJax 目前，NexT 提供两种数学公式渲染引擎，分别为 MathJax 和 Katex。本人选择了MathJax作为渲染引擎，主要考虑到该引擎相较更全面。 步骤1：Windows下载Pandoc，并安装默认安装。 步骤2：卸载原有的渲染器 hexo-renderer-marked，并安装渲染器 12npm uninstall hexo-renderer-markednpm install hexo-renderer-pandoc 步骤3：设置Next主题的_config.yml文件(themes/next/_config.yml) 123456789101112math: every_page: true mathjax: enable: true # Available values: none | ams | all tags: none # See: https://mhchem.github.io/MathJax-mhchem/ mhchem: false katex: enable: false # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex copy_tex: false 参考文献：Next主题的数学公式 11 设置标签与分类 11.1 设置分类 步骤1：在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ： 12$ cd your-hexo-site$ hexo new page categories 步骤2：编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下： 123456title: 分类date: 2022-05-03 13:53:41type: &quot;categories&quot;comments: false--- 步骤3：在菜单中添加链接。编辑 主题配置（themes/next/_config.yml）文件 ， 添加 categories 到 menu 中，如下: 1234menu: home: / archives: /archives categories: /categoriesb 步骤4：在文章中分类标签 12categories:- [父目录&lt;,子目录&gt;&lt;，子子目录&gt;] 例如，下面为文章定义了三级目录，文章在计算机/编程语言/C语言这个目录下。 12categories:- [计算机,编程语言，C语言] 11.2 设置标签 步骤1：在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ： 12$ cd your-hexo-site$ hexo new page categories 步骤2：编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下： 12345title: 分类date: 2014-12-22 12:39:04type: &quot;categoriecomments: falses&quot;--- 步骤3：在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下: 1234menu: home: / archives: /archives tags: /tags 步骤4：在文章中使用标签Tags,例如 1234tags: - 静态博客 - hexo - Next主题 11.3 Hexo标签和分类的使用注意事项 Front-matter | Hexo 12 设置本地搜索 步骤1：安装插件 1npm install hexo-generator-searchdb --save 步骤2：修改站点文件 123456# Search search: path: ./public/search.xml field: post format: html limit: 10000 步骤3：修改主题配置文件 12345678910111213# Local Search# Dependencies: https://ithub.com/theme-next/hexo-generator-searchdblocal_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 7 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 13 设置Front-matter内容 新创建文章的时候，希望文件头带有标签等字符。 hexo具有的标记见Front-matter | Hexo。 只要设置scaffolds/post.md文件即可。 1234title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags: 14 设置加载条 123456789pace: enable: true # All available colors: # black | blue | green | orange | pink | purple | red | silver | white | yellow color: blue # All available themes: # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal theme: minimal","categories":[{"name":"blog","slug":"blog","permalink":"http://example.com/categories/blog/"}],"tags":[{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"Next主题","slug":"Next主题","permalink":"http://example.com/tags/Next%E4%B8%BB%E9%A2%98/"}]},{"title":"如何利用GitHub作为图床","slug":"如何利用GitHub作为图床","date":"2022-03-20T12:24:00.000Z","updated":"2022-05-03T16:06:57.495Z","comments":true,"path":"posts/80154e2d.html","link":"","permalink":"http://example.com/posts/80154e2d.html","excerpt":"1 下载PicGo 进入PicGo的下载地址，根据系统选择版本。因为我的点好是 win11，因此选择的软件版本是 PicGo-Setup-2.3.0-x64.exe。下载完成后，双击软件按照默认设置安装。 2 创建 GitHub 仓库 创建后，在我的GitHub页面中，就有一个 myImage 的仓库。 12https://github.com/xiaorangood/myImage.gitgit@github.com:xiaorangood/myImage.git","text":"1 下载PicGo 进入PicGo的下载地址，根据系统选择版本。因为我的点好是 win11，因此选择的软件版本是 PicGo-Setup-2.3.0-x64.exe。下载完成后，双击软件按照默认设置安装。 2 创建 GitHub 仓库 创建后，在我的GitHub页面中，就有一个 myImage 的仓库。 12https://github.com/xiaorangood/myImage.gitgit@github.com:xiaorangood/myImage.git 3 生成 token 点击“头像”-&gt;\"setting\" -&gt; \"Developer settings\" -&gt; \"Personal access tokens\" -&gt; \"Generate New token\"。 设置token的名字、有效期；并勾选“repo”，最后下拉到最下方，点击“Generate token”按钮。 4 配置picgo 打开picgo软件，在左边的栏目中点击“图床设置” -&gt; \"GitHub图床\"。按照下面的说明设置 设定仓库名：按照“用户名/图床仓库名”的格式填写 设定分支名：“master” 设定Token：粘贴之前生成的Token 指定存储路径：填写想要储存的路径，如“images/”，这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中。 设定自定义域名：它的的作用是，在图片上传后，PicGo会按照自定义域名+上传的图片名的方式生成访问链接，放到粘贴板上，因为我们要使用jsDelivr加速访问，所以可以设置为 https://cdn.jsdelivr.net/gh/用户名/图床仓库名。jsDelivr的参考格式：https://cdn.jsdelivr.net/gh/xiaorangood/myImage。 上述的内容填写完成后，点击“确认”按钮，再设置GitHub图床为默认图床。 5 上传图片 点击左侧栏目里的上传区后，将需要上传的图片拖入上传区即可。","categories":[{"name":"blog","slug":"blog","permalink":"http://example.com/categories/blog/"}],"tags":[{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"图床","slug":"图床","permalink":"http://example.com/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Picgo","slug":"Picgo","permalink":"http://example.com/tags/Picgo/"}]},{"title":"在Windows下利用Hexo搭建个人博客","slug":"在Windows下利用Hexo搭建个人博客","date":"2022-03-20T07:26:46.000Z","updated":"2022-05-05T15:18:45.310Z","comments":true,"path":"posts/e29692c.html","link":"","permalink":"http://example.com/posts/e29692c.html","excerpt":"1 本地创建个人博客 1.1 安装 git 工具 从git官网下载windows下的软件，本文按照时的软件版本为 2.35.1。 安装软件时，使用默认设置一直点击 Next 按钮，一直到下图的页面勾选两个选项；然后点击 Install 安装 git 软件。 勾选“Enable experimental support for pseudo consoles”选项是为了在 git bash 中启动 Hexo 服务后，可以通过 Ctrl + c 停止 Hexo 服务器的运行。","text":"1 本地创建个人博客 1.1 安装 git 工具 从git官网下载windows下的软件，本文按照时的软件版本为 2.35.1。 安装软件时，使用默认设置一直点击 Next 按钮，一直到下图的页面勾选两个选项；然后点击 Install 安装 git 软件。 勾选“Enable experimental support for pseudo consoles”选项是为了在 git bash 中启动 Hexo 服务后，可以通过 Ctrl + c 停止 Hexo 服务器的运行。 1.2 安装node.js Hexo是基于Node.js的，因此在安装Hexo前，需要安装该软件。 从 Node.js官网下载软件，当前版本号是 17.7.2。 下载软件后，按照默认设置安装即可。 1.3 安装 Hexo 软件 执行以下几个命令安装 123456789# 将npm镜像修改为淘宝镜像npm config set registry &quot;https://registry.npm.taobao.org&quot;# 使用npm安装 Hexonpm install -g hexo-cli# 在当前目录下初始化一个博客目录，并进入该目录hexo init blogcd blog# 在博客目录使用命令启动Hexo服务器hexo s 浏览器后，输入 http://localhost:4000/ 即可打开博客网页。 如果希望在其他端口打开网页，可以使用 Hexo 命令指定端口。例如指定端口为5000。 1hexo s -p 5000 1.4 创建Hexo文件 执行以下命令后，Hexo会在 source_posts 目录下创建以文章名命名的markdown文件 1$ hexo n &quot;文章名&quot; 然后执行命令生成html文件 1$ hexo g 最后使用命令运行 Hexo 服务器即可看到新内容 2 部署博客到Git Pages 2.1 创建博客仓库 在github页面中，创建新仓库，仓库名字为 xiaorangood.github.io 。 2.2 安装自动部署工具并设置 执行以下命令安装部署工具： 1npm install --save hexo-deployer-git 设置站点的_config.yml 配置文件内容： 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: git@github.com:xiaorangood/xiaorangood.github.io.git branch: master 2.3 测试网络连接 通过命令生成 ssh 密钥: 12ssh-keygencat ~/.ssh/id_rsa.pub 在获得密钥后，添加到github的个人设置页面中添加密钥： 添加密钥后，通过命令验证是否连接成功： 12$ ssh -T git@github.comHi xiaorangood! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 如果出现超时的现象，通过命令设置 git 的代理： 12git config --global http.proxy &#x27;http://127.0.0.1:10809&#x27;git config --global https.proxy &#x27;http://127.0.0.1:10809&#x27; 2.4 部署个人博客网页 在blog的目录下执行命令部署个人博客： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 3 使用source分支来保存博客源文件 3.1 在 github 上创建新分支 上个章节中展示了使用 master 分支来保存生成的博客页面的方法，但原来的markdown文件并没有保存。为了保存 Markdown 文件，在仓库中创建source分支。 将source分支修改为默认分支： 检查仓库的默认分支： 3.2 设置本地仓库 在 blog 所在目录，执行仓库初始化，并设置远端仓库的地址。然后切换到目标分支。这里我的博客是在D:/blog/目录下。 123git initgit remote add origin git@github.com:xiaorangood/xiaorangood.github.io.gitgit checkout source -- 因为我们只需要保留博客源码，其他无关的文件并不希望推送，需要确保配好了.gitignore文件，通常如下： 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_multiconfig.yml 3.3 提交源文件 1git add . &amp;&amp; git commit -m &quot;Regular save&quot; &amp;&amp; git push origin source 3.4 删除非源文件 由于source分支是从master复制而来，所以有一些是deployment文件。这些部署的文件可以删除，也可以理会。 删除文件夹后只剩下如下的文件夹。 1node_modules/ scaffolds/ source/ themes/ 4 新环境 假设换电脑了，要在新环境继续在原有仓库基础上撸文章，此时通过git clone将博客源码拉到本地，然后安装、初始化hexo就能搞定： 12345678git clone git@github.com:xiaorangood/xiaorangood.github.io.git blogcd blognpm install hexonpm install hexo-deployer-git -save// hexo环境配置好后，继续像之前一样hexo new post_name...","categories":[{"name":"blog","slug":"blog","permalink":"http://example.com/categories/blog/"}],"tags":[{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"数据结构系列笔记-算法与复杂度分析","slug":"数据结构系列笔记-算法与复杂度分析","date":"2021-11-22T09:43:14.000Z","updated":"2021-11-05T15:32:27.304Z","comments":true,"path":"posts/bd4b8c1c.html","link":"","permalink":"http://example.com/posts/bd4b8c1c.html","excerpt":"1 数据结构与算法的研究内容 逻辑结构：研究对象的特征及其相互之间的关系。 存储结构：研究有效组织计算机存储。 算法：有效地实现对象之间的“运算”关系。 2 算法的定义 算法是对特定问题求解方法和步骤的一种描述，它是指令的有限序列。其中每个指令表示一个或多个操作。","text":"1 数据结构与算法的研究内容 逻辑结构：研究对象的特征及其相互之间的关系。 存储结构：研究有效组织计算机存储。 算法：有效地实现对象之间的“运算”关系。 2 算法的定义 算法是对特定问题求解方法和步骤的一种描述，它是指令的有限序列。其中每个指令表示一个或多个操作。 3 算法的描述 自然语言：英语、中文。 流程图：传统流程图、NS流程图。 伪代码（类语言）：类C语言。 程序代码：C语言程序、JAVA语言程序。 4 算法与程序的关系 算法是解决问题的一种方法或一个过程，考虑如何将输入转换成输出，一个问题可以有多种算法。程序是用某种程序设计语言对算法的具体实现。程序=数据结构+算法；数据结构通过算法实现操作；算法根据数据结构设计程序。 5 算法特性 一个算法必须具备以下五个重要特征： 有穷性：一个算法必须总是在执行有穷步骤之后结束，且每一步都在有穷时间内完成。 确定性：算法中的每一条指令必须有确切的含义，没有二义性，在任何条件下，只有唯一的一条直线路径，即对于相同的输入只能得到相同的输出。 可行性：算法是可以执行的，算法描述的操作可以通过已经实现的基本操作执行有限次来实现。 一个算法有零个或多个输入。 一个算法有一个或多个输出。 6 算法设计的要求 具有四个要求： 正确性（Correctness） 可读性（Readability） 健壮性（Robustness） 高效性（Efficiency） 6.1 正确性 正确性是满足问题要求，能正确解决问题。 算法转换为程序后要注意： 程序中不含语法错误； 程序对于几组输入数据能够得出满足要求的结果； 程序对于精心选择的、典型的、苛刻且带有刁难性的几组输入数据能够得出满足要求的结果； 程序对于一切合法的输入数据都能得出满足要求的结果。 通常以第三层意义上的正确性作为衡量一个算法是否合格的标准。 6.2 可读性 可读性具有2层含义： 算法主要是为了人阅读和交流，其次才是为计算机执行，因此算法应该易于人的理解； 另一方面，晦涩难读的算法易于隐藏较多错误而难以调试。 6.3 健壮性 健壮性是指当输入非法数据时，算法恰当的做出反应或进行相应处理，而不是产生莫名奇妙的输出结果。处理出错的方法，不应是中断程序的执行，而应该是返回一个表示错误或错误性质的值，以便在更高的抽象层次上进行处理。 6.4 高效性 高效性要求尽量少的时间和尽量低的存储需求。 7 算法分析 算法分析用来评价同一个问题的多个算法。算法分析的目的是看算法实际是否可行，并在同一问题存在多个算法时可进行性能上的比较，以便从中挑选除比较优的算法。 一个好算法首先具备正确性，然后健壮性、可读性；在这几个方面多满足的情况下，主要考虑算法的效率，通过算法的效率高低来评判不同算法的优劣程度。算法效率包括： 时间效率：指算法所消耗的时间； 空间效率：指算法执行过程中所消耗的存储空间。 时间效率和空间效率有时候是矛盾的。 8 算法的时间效率 8.1 算法效率的度量方法 算法时间效率可以用依据该算法编制的程序在计算机上所消耗的时间来度量。有两种度量方法： 事后统计： 事前分析： 8.1.1 事后统计 事后统计方法是将算法实现，测算其时间和空间开销；缺点是编写程序实现算法将或非较多的时间和精力，所得实验结果依赖于计算机的软硬件等环境因素，掩盖算法本身的优劣。 8.1.2 事前分析法 事前分析法是对算法所消耗资源的一种估计算法。 一个算法的运行时间是一个算法在计算机上运行所耗费的时间，大致可以等于计算机执行一种简单的操作（如赋值、比较、移动等）所需的时间与算法中进行的简单操作次数乘积。 算法运行时间 = 一个简单操作所需要的时间×简单操作次数。 即算法中每条语句的执行时间之和。 算法运行时间 = Σ(每条语句执行次数)×该语句执行一次所需要的时间。 每条语句的执行次数又称为语句的频度。 算法运行时间 = Σ(每条语句频度)×该语句执行一次所需要的时间。 每条语句执行一次所需的时间，一般都是随机器而异的。每条语句执行一次所需的时间，一般都是随机器而异的。取决于机器的指令性能、速度以及编译的代码质量，是由机器本身软硬件环境决定的，它与算法无关。 我们可以假设执行每条语句所需的时间均为单位时间，此时对算法运行时间的讨论就可以转化为讨论该算法中所有语句的执行次数，即频度之和了。 这就可以独立于不同机器的软硬件环境来分析算法的时间性能了。 算法运行时间的例子：两个n×n矩阵相乘算法 123456for (i=1; i&lt;=n; i++) // n+1次，n次循环，1次判断 for (j=1; j&lt;=n; j++) &#123; // n*(n+1)次，外层循环n次，内层n+1次 c[i][j] = 0; // n*n次，2层循环 for (k=0; k&lt;n; k++) // n*n*(n+1)次，外面2层循环，内层n+1次 c[i][j] = c[i][j] + a[i][k] * b[k][j]; // n*n*n次，三层循环&#125; 我们把算法所耗费的时间定义为该算法中每条语句的频度之和，则该算法的时间消耗T(n)为：T(n) = 2×n3 + 3×n2 + 2×n + 1。 8.1.3 数量级 为了便于不同算法的时间效率，我们仅比较它们的数量级。例如，\\(T_1(n) = 10 \\times n^2\\) 与 \\(T_2(n)=5 \\times n\\)这两个比较。若有某个辅助函数f(n)使得当n趋近于无穷大时，\\(T(n)/f(n)\\)的极限值为不等于零的常数，则称\\(f(n)\\)是\\(T(n)\\)的同数量级函数。记作\\(T(n)=O(f(n))\\)，称\\(O(f(n))\\)为算法的渐进时间复杂度（O是数量级的符号），简称时间复杂度。 例如，公式\\(T(n) = 2 \\times n^3 + 3 \\times n^2 + 2 \\times n + 1\\)中，当\\(n\\to \\infty\\)时，\\(T(n)/n^2 \\rightarrow 2\\)，这表示\\(n\\)充分大时，\\(T(n)\\)与\\(n^3\\)是同阶或同数量级，引入大“O”记号，则\\(T(n)\\)可记作：\\(T(n)=O(n^3)\\) 8.2 算法时间复杂度定义 定义：算法中基本语句重复执行的次数是问题规模\\(n\\)的某个函数\\(f(n)\\)，算法的时间量度记作：\\(T(n)=O(n)\\)。它表示随着n的增大，算法执行的时间的增长率和\\(f(n)\\)的增长率相同，称为渐进时间复杂度。数据符号“O”定义为若\\(T(n)\\)和\\(f(n)\\)是定义在正整数集合上的两个函数，则\\(T(n)=O(f(n))\\)表示存在正的常数\\(C\\)和\\(n_0\\)，使得当\\(n≥n_0\\)时都满足\\(0≤T(n)≤C*f(n)\\)。 基本语句是指算法中重复执行次数和算法的执行时间成正比的语句；对算法运行时间的贡献最大的语句；执行次数最多语句。 问题规模\\(n\\)越大，算法的执行时间越长。对于排序来说，\\(n\\)为记录数；对于矩阵来说，\\(n\\)为矩阵的阶数；对于多项式来说，\\(n\\)为多项式的项数；对于集合来说，\\(n\\)为元素个数；对于树来说，\\(n\\)为树的结点个数；对于图来说，\\(n\\)为图的顶点数或边数。 8.3 算法时间复杂度基本步骤 一般方法： 找出语句频度最大的那条语句作为基本语句; 计算基本语句的频度得到问题规模n的某个函数f(n)； 取其数量级用符号“O”表示。 技巧: 忽略所有低次幂项和高次幂系数，体现增长率的含义； 时间复杂度是由嵌套最深语句的频度决定的。 8.4 时间复杂度分析例题 计算下方语句的时间复杂度。 8.4.1 例子1：计算N×N矩阵相乘 1234567for(i = 1; i &lt;= n; i++) for(j = 1; i &lt;= n; j++) &#123; c[i][j] = 0; for (k = 1; k &lt;= n; k++) c[i][j]=c[i][j] + a[i][j] * b[k][j]; &#125; 算法的基本操作语句为：c[i][j]=c[i][j] + a[i][j] * b[k][j]; \\[ T(n) = \\sum_{i=1}^n\\sum_{j=1}^n\\sum_{k=1}^n 1 = \\sum_{i=1}^n\\sum_{j=1}^n n = \\sum_{i=1}^nn^2 = n^3 = O(n^3) \\] 8.4.2 例子2 1234for (i=1; i&lt;=n; i++) for (j=1; j&lt;=i; j++) for (k=1; j&lt;=j; j++) x = x + 1; \\[ \\begin{align} 语句的频度 &amp; = \\sum_{i=1}^n\\sum_{j=1}^n\\sum_{z=1}^n 1 \\\\ &amp; = \\sum_{i=1}^n\\sum_{j=1}^nj \\\\ &amp;= \\sum_{i=1}^n \\frac{i(i+1)}{2}\\\\ &amp;=\\frac{1}{2} \\left( \\sum_{i=1}^ni^2+ \\sum_{i=1}^ni\\right) \\\\ &amp; =\\frac{1}{2} \\left( \\frac{n(n+1)(n+2)}{6} + \\frac{n(n+1)}{2}\\right) \\\\ &amp;= \\frac{n(n+1)(n+2)}{6} \\end{align} \\] 8.4.3 例子3：分析以下程序段的时间复杂度 123i = 1; //语句1while(i &lt;= n) i = i * 2; // 语句1 关键时找除执行次数x与n的关系，并表示成n的函数； 若循环体执行1此，则数值i = i 2 = 1 2 = 2, 若循环执行2次，则i= i2 = 22=22; 若循环执行3次，则i= i2 = 22=23; …… 若循环执行x次，则i=2x。 设语句2执行次数为x次，由循环条件\\(i≤n\\)，可得\\(2^x ≤ n\\)，即\\(x≤log2(n)\\) 8.5 算法时间复杂度分类 有的情况下，算法中基本操作重复执行次数还随着问题的输入数据集不同而不同。 最坏时间复杂度是指在最坏情况下，算法的时间复杂度； 平均时间复杂度是指在所有可能输入实例在等概率出现情况下哎，算法的期望运行时间； 最好时间复杂度是指在最好情况下，算法的时间复杂度。 一般总是考虑在最坏情况下的时间复杂度，以保证算法的运行时间不会比它更长。 9 大O的运算规则 9.1 加法法则 \\[ T(n) = T_1(n) + T_2(n) = O(f(n)) + O(g(n)) = O(max(f(n), g(n))) \\] 9.2 乘法规则 \\[ T(n) = T_1(n) \\times T_2(n) = O(f(n)) \\times O(g(n)) = O(f(n) \\times g(n)) \\] 10 时间复杂度\\(T(n)\\)按照数量级递增顺序 常数阶 对数阶 线性阶 线性对数阶 平方阶 立方阶 …… \\(k\\)次方阶 指数阶 1 \\(O(log_2(n))\\) \\(O（n)\\) \\(n log_2(n)\\) \\(O(n^2)\\) \\(O(n^3)\\) …… \\(O(n^k)\\) \\(O(2^2)\\) 11 渐进空间复杂度 渐进空间复杂度是算法所需存储空间的度量，记作\\(S(n)=O(f(n))\\)，其中n为问题的规模大小。算法要占用的空间包括：①算法本身占据的空间，输入/输出，指令，常数，变量等；②算法需要使用的辅助空间。 12 设计好算法的过程 抽象数据类型是数据的逻辑结构加抽象的运算。 数据的逻辑结构会有n个数据存储结构，即数据存储结构1一直到数据存储结构n；每个数据结构会有m中算法，因此会有数据存储结构1对应的算法11到算法1m，数据存储结构n对应的算法n1到算法nm，共计n*m个算法。最后通过算法分析，找到最好的算法。","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"数据结构系列笔记-概述","slug":"数据结构系列笔记-概述","date":"2021-11-21T11:23:47.000Z","updated":"2021-12-05T15:35:05.146Z","comments":true,"path":"posts/ce4bda26.html","link":"","permalink":"http://example.com/posts/ce4bda26.html","excerpt":"1 程序的本质 程序等于算法加数据结构。 2 基本数据结构 线性结构:（1）线性表、（2）栈和队列、（3） 串、（4）数组和广义表 非线性结构：树、广义表 3 基本数据处理技术 查找技术 排序技术","text":"1 程序的本质 程序等于算法加数据结构。 2 基本数据结构 线性结构:（1）线性表、（2）栈和队列、（3） 串、（4）数组和广义表 非线性结构：树、广义表 3 基本数据处理技术 查找技术 排序技术 4 数据结构的研究内容 4.1 计算机解决问题的基本步骤 具体问题抽象为数据模型，其实质为 分析问题； 提取操作对象； 找出操作对象之间的关系； 用数学语言描述，即数据结构； 设计算法 编程、调试、运行 4.2 计算机的应用 早期，计算机主要应用于数值计算，例如求解梁架结构中的应力、预报人口增长情况。 数值计算的特点是数据元素之间的关系简单，但计算复杂。 现在，计算机越来越多地被用于非数值计算问题，例如学生学籍管理系统、图书管理系统、人事管理系统、仓库管理系统、通讯录等。 非数值计算各要素的含义 | 例子 | 操作对象 | 操作算法 | 操作对象间关系 | 数据结构 | |---|---|---|---|---| |学籍管理系统中的关系|每位学生的信息|查询、插入、修改、删除等|线性关系|线性数据结构、线性表| |人机棋局对弈问题中的关系|描述棋盘格局信息的棋局状态|走棋，即选择一种策略使棋局状态发生变化|非线性关系|树| 非数值计算问题的特点： 所有问题无法使用数学公式或方程来描述，是一些“非数值计算”的程序设计问题； 描述非数值计算问题的数学模型不是数学方程，而是诸如表、树和图之类的具有逻辑关系的数据； 数据结构是一门研究非数值计算程序设计中操作对象以及它们之间的关系和操作的学科。 5 基本概念和术语 5.1 数据（Data） 数据（Data）是输入计算机且能被计算机处理的各种符号的集合，是信息的载体，是对客观事物符号化的表示；是能够被计算机识别、存储和加工。 数据包括数值型的数据和非数值型的数据；数值型的数据有整数、实数等；非数值型数据有文字、图像、图形、声音等。 5.2 数据元素（Data element） 数据元素（Data element）是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。数据元素也简称为元素、记录、结点或顶点。例如学生表中一个学生的信息，即一个记录。 5.3 数据项（Data Item） 数据项（Data Item）是构成数据元素的不分割的最小单位。例如学生表中一个学生的姓名、学号、性别、出生日期、政治面貌均可作为一个数据项。 5.4 数据、数据元素、数据项三者之间的关系 数据&gt;数据元素&gt;数据项。 5.5 数据对象（Data Object） 数据对象（Data Object）是性质相同的数据类型的集合，是数据的一个子集。例如整数数据对象、字母字符数据对象、学籍表也可以看作一个数据对象。 5.6 数据元素与数据对象的区别 数据元素是组成数据的基本单位，是数据集合的个体； 数据对象是性质想吐的数据元素的集合，是数据集合的子集。 5.7 数据结构 5.7.1 定义 数据元素不是孤立存在的，它们之间存在某种关系，数据元素相互之间的关系称为结构（Structure）。数据结构是相互之间存在一种或多种特定关系的数据元素集合。数据结构是带结构的数据元素的集合。 5.7.2 数据结构的内容 数据元素之间的逻辑关系，也称为逻辑结构； 数据元素及其结构在计算机内存中的表示（又称为映像），称为数据的物理结果或数据的存储结构； 数据的运算和实现，即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现。 5.7.3 数据结构的层次 数据结构的层次包括逻辑结构和存储结构。 逻辑结构是描述数据元素之间的逻辑关系；与数据存储无关，独立于计算机；是从具体问题抽象出来的数学模型。 存储结构又称为物理结构，是数据元素及其关系在计算机存储器中的结构（存储方式）；是数据结构在计算机中的表示。 两者的关系： 存储结构是逻辑关系的映射与元素本身的映像； 逻辑结构是数据结构的抽象，存储结构是数据结构的实现； 两者综合起来建立了数据元素之间的结构关系。 5.7.4 逻辑结构的分类 划分方法一：线性结构和非线性结构。 线性结构是有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前驱和一个直接后继。 非线性结构是一个节点可能有多个直接前驱和直接后继，例如树、图。 划分方法二：将逻辑结构分为四种基本逻辑结构，即集合、线性、树、图。 5.7.5 存储结构的分类 存储结构的分类包括顺序存储结构、链式存储结构、索引存储结构、散列存储结构。 顺序存储结构是用一组连续的存储单元，依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。C语言中用数组来实现顺序存储结构。 链式存储结构是用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。C语言中用指针来实现链式存储结构。 索引存储结构是在存储结点信息的同时，还建立附加的索引表。索引表的每一项称为索引项。索引表的一般形式是“(关键字，地址)”。关键字是能唯一表示结点的那些数据项。若每个结点的索引表中都有一个索引项，则该索引表称为稠密索引（Dense Index）。若一组结点子啊索引表中只对应一个索引项，则该索引表称为稀疏索引表（Sparse Index）。 散列存储结构是根据结点的关键字直接计算出该点的存储地址。 5.8 数据结构类型 数据结构类型可以约束变量或常量的取值范围；约束变量或常量的操作。 数据类型（Data Type）是一组性质相同的值的集合以及定义于这个值集合上的一组操作的总称。数据类型=值的集合+值集合上的一组操作。 抽象数据类型（Abstract Data Type，ADT）是指一个数学模型以及定义在此数据模型上的一组操作。由用户定义，从问题抽象出数据模型（逻辑结构），还包括定义在数据模型上的一组抽象运算（相关操作），不考虑计算机内的具体存储结构与运损的具体实现算法。 抽象数据类型的形式定义：抽象数据类型可用（D，S，P）三元组表示，其中D是数据对象，S是D上的关系集，P是对D的基本操作集。","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}],"categories":[{"name":"3gpp","slug":"3gpp","permalink":"http://example.com/categories/3gpp/"},{"name":"NR","slug":"3gpp/NR","permalink":"http://example.com/categories/3gpp/NR/"},{"name":"blog","slug":"blog","permalink":"http://example.com/categories/blog/"},{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"3gpp","slug":"3gpp","permalink":"http://example.com/tags/3gpp/"},{"name":"NR","slug":"NR","permalink":"http://example.com/tags/NR/"},{"name":"静态博客","slug":"静态博客","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"Next主题","slug":"Next主题","permalink":"http://example.com/tags/Next%E4%B8%BB%E9%A2%98/"},{"name":"图床","slug":"图床","permalink":"http://example.com/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Picgo","slug":"Picgo","permalink":"http://example.com/tags/Picgo/"},{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}